/*
자바스크립트는 함수를 특별한 종류의 값으로 취급합니다. 다른 언어에서처럼 "특별한 동작을 하는 구조"로 취급되지 않습니다.
*/
function sayHi() {
  alert("Hello");
}
// 함수 선언 방식 외에 함수 표현식(Function Expression) 을 사용해서 함수를 만들 수 있습니다.
let sayHi2 = function () {
  alert("Hello");
};
sayHi2();

// 함수 표현식의 끝에 왜 세미 콜론 ;이 붙는지 의문이 들 수 있습니다. 함수 선언문에는 세미 콜론이 없는데 말이죠.
// if { ... }, for { }, function f { } 같이 중괄호로 만든 코드 블록 끝엔 ;이 없어도 됩니다.
/* 
함수 표현식은 let sayHi = ...;과 같은 구문 안에서 값의 역할을 합니다.
코드 블록이 아니고 값처럼 취급되어 변수에 할당되죠. 모든 구문의 끝엔 세미 콜론 ;을 붙이는 게 좋습니다. 함수 표현식에 쓰인 세미 콜론은 함수 표현식 때문에 붙여진 게 아니라, 구문의 끝이기 때문에 붙여졌습니다.
*/

/*
함수 표현식 vs 함수 선언문
함수 표현식과 선언문의 차이에 대해 알아봅시다.
첫 번째는 문법입니다. 코드를 통해 어떤 차이가 있는지 살펴봅시다.
함수 선언문: 함수는 주요 코드 흐름 중간에 독자적인 구문 형태로 존재합니다.
함수 표현식: 함수는 표현식이나 구문 구성(syntax construct) 내부에 생성됩니다. 아래 예시에선 함수가 할당 연산자 =를 이용해 만든 “할당 표현식” 우측에 생성되었습니다.
두 번째 차이는 자바스크립트 엔진이 언제 함수를 생성하는지에 있습니다.
함수 표현식은 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성합니다. 따라서 실행 흐름이 함수에 도달했을 때부터 해당 함수를 사용할 수 있습니다.
함수 선언문은 함수 선언문이 정의되기 전에도 호출할 수 있습니다.


*/
// 이게 왜 되냐? -> 함수 선언식은 정의 되기전에 호출 가능
sayHi3("John"); // Hello, John

function sayHi3(name: string) {
  alert(`Hello, ${name}`);
}

// sayHi4("John"); // error!

let sayHi4 = function (name: string) {
  // (*) 마술은 일어나지 않습니다.
  alert(`Hello, ${name}`);
};
